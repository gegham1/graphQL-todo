# This file was generated based on "schema.json". Do not edit manually.

schema {
    query: query_root
    mutation: mutation_root
    subscription: subscription_root
}

"mutation root"
type mutation_root {
    "delete data from the table: \"tasks\""
    delete_tasks(
        #filter the rows which have to be deleted
        where: tasks_bool_exp!
    ): tasks_mutation_response
    "delete data from the table: \"users\""
    delete_users(
        #filter the rows which have to be deleted
        where: users_bool_exp!
    ): users_mutation_response
    "insert data into the table: \"tasks\""
    insert_tasks(
        #the rows to be inserted
        objects: [tasks_insert_input!]!,
        #on conflict condition
        on_conflict: tasks_on_conflict
    ): tasks_mutation_response
    "insert data into the table: \"users\""
    insert_users(
        #the rows to be inserted
        objects: [users_insert_input!]!,
        #on conflict condition
        on_conflict: users_on_conflict
    ): users_mutation_response
    "update data of the table: \"tasks\""
    update_tasks(
        #sets the columns of the filtered rows to the given values
        _set: tasks_set_input,
        #filter the rows which have to be updated
        where: tasks_bool_exp!
    ): tasks_mutation_response
    "update data of the table: \"users\""
    update_users(
        #sets the columns of the filtered rows to the given values
        _set: users_set_input,
        #filter the rows which have to be updated
        where: users_bool_exp!
    ): users_mutation_response
}

"query root"
type query_root {
    "fetch data from the table: \"tasks\""
    tasks(
        #distinct select on columns
        distinct_on: [tasks_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [tasks_order_by!],
        #filter the rows returned
        where: tasks_bool_exp
    ): [tasks!]!
    "fetch aggregated fields from the table: \"tasks\""
    tasks_aggregate(
        #distinct select on columns
        distinct_on: [tasks_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [tasks_order_by!],
        #filter the rows returned
        where: tasks_bool_exp
    ): tasks_aggregate!
    "fetch data from the table: \"tasks\" using primary key columns"
    tasks_by_pk(id: uuid!): tasks
    "fetch data from the table: \"users\""
    users(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(auth0Id: String!, id: uuid!): users
}

"subscription root"
type subscription_root {
    "fetch data from the table: \"tasks\""
    tasks(
        #distinct select on columns
        distinct_on: [tasks_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [tasks_order_by!],
        #filter the rows returned
        where: tasks_bool_exp
    ): [tasks!]!
    "fetch aggregated fields from the table: \"tasks\""
    tasks_aggregate(
        #distinct select on columns
        distinct_on: [tasks_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [tasks_order_by!],
        #filter the rows returned
        where: tasks_bool_exp
    ): tasks_aggregate!
    "fetch data from the table: \"tasks\" using primary key columns"
    tasks_by_pk(id: uuid!): tasks
    "fetch data from the table: \"users\""
    users(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): [users!]!
    "fetch aggregated fields from the table: \"users\""
    users_aggregate(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): users_aggregate!
    "fetch data from the table: \"users\" using primary key columns"
    users_by_pk(auth0Id: String!, id: uuid!): users
}

"columns and relationships of \"tasks\""
type tasks {
    completed: Boolean!
    createdAt: date!
    description: String!
    id: uuid!
    name: String!
    "An object relationship"
    owner: users
    ownerId: uuid
    "An array relationship"
    tasks(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): [users!]!
    "An aggregated array relationship"
    tasks_aggregate(
        #distinct select on columns
        distinct_on: [users_select_column!],
        #limit the number of rows returned
        limit: Int,
        #skip the first n rows. Use only with order_by
        offset: Int,
        #sort the rows by one or more columns
        order_by: [users_order_by!],
        #filter the rows returned
        where: users_bool_exp
    ): users_aggregate!
}

"aggregated selection of \"tasks\""
type tasks_aggregate {
    aggregate: tasks_aggregate_fields
    nodes: [tasks!]!
}

"aggregate fields of \"tasks\""
type tasks_aggregate_fields {
    count(columns: [tasks_select_column!], distinct: Boolean): Int
    max: tasks_max_fields
    min: tasks_min_fields
}

"aggregate max on columns"
type tasks_max_fields {
    createdAt: date
    description: String
    name: String
}

"aggregate min on columns"
type tasks_min_fields {
    createdAt: date
    description: String
    name: String
}

"response of any mutation on the table \"tasks\""
type tasks_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [tasks!]!
}

"columns and relationships of \"users\""
type users {
    auth0Id: String!
    createdAt: date!
    id: uuid!
    tasks: uuid
    username: String!
}

"aggregated selection of \"users\""
type users_aggregate {
    aggregate: users_aggregate_fields
    nodes: [users!]!
}

"aggregate fields of \"users\""
type users_aggregate_fields {
    count(columns: [users_select_column!], distinct: Boolean): Int
    max: users_max_fields
    min: users_min_fields
}

"aggregate max on columns"
type users_max_fields {
    auth0Id: String
    createdAt: date
    username: String
}

"aggregate min on columns"
type users_min_fields {
    auth0Id: String
    createdAt: date
    username: String
}

"response of any mutation on the table \"users\""
type users_mutation_response {
    "number of affected rows by the mutation"
    affected_rows: Int!
    "data of the affected rows by the mutation"
    returning: [users!]!
}

"column ordering options"
enum order_by {
    #in the ascending order, nulls last
    asc
    #in the ascending order, nulls first
    asc_nulls_first
    #in the ascending order, nulls last
    asc_nulls_last
    #in the descending order, nulls first
    desc
    #in the descending order, nulls first
    desc_nulls_first
    #in the descending order, nulls last
    desc_nulls_last
}

"unique or primary key constraints on table \"tasks\""
enum tasks_constraint {
    #unique or primary key constraint
    task_id_key
    #unique or primary key constraint
    task_pkey
}

"select columns of table \"tasks\""
enum tasks_select_column {
    #column name
    completed
    #column name
    createdAt
    #column name
    description
    #column name
    id
    #column name
    name
    #column name
    ownerId
}

"update columns of table \"tasks\""
enum tasks_update_column {
    #column name
    completed
    #column name
    createdAt
    #column name
    description
    #column name
    id
    #column name
    name
    #column name
    ownerId
}

"unique or primary key constraints on table \"users\""
enum users_constraint {
    #unique or primary key constraint
    users_id_key
    #unique or primary key constraint
    users_pkey
}

"select columns of table \"users\""
enum users_select_column {
    #column name
    auth0Id
    #column name
    createdAt
    #column name
    id
    #column name
    tasks
    #column name
    username
}

"update columns of table \"users\""
enum users_update_column {
    #column name
    auth0Id
    #column name
    createdAt
    #column name
    id
    #column name
    tasks
    #column name
    username
}

"expression to compare columns of type Boolean. All fields are combined with logical 'AND'."
input Boolean_comparison_exp {
    _eq: Boolean
    _gt: Boolean
    _gte: Boolean
    _in: [Boolean!]
    _is_null: Boolean
    _lt: Boolean
    _lte: Boolean
    _neq: Boolean
    _nin: [Boolean!]
}

"expression to compare columns of type String. All fields are combined with logical 'AND'."
input String_comparison_exp {
    _eq: String
    _gt: String
    _gte: String
    _ilike: String
    _in: [String!]
    _is_null: Boolean
    _like: String
    _lt: String
    _lte: String
    _neq: String
    _nilike: String
    _nin: [String!]
    _nlike: String
    _nsimilar: String
    _similar: String
}

"expression to compare columns of type date. All fields are combined with logical 'AND'."
input date_comparison_exp {
    _eq: date
    _gt: date
    _gte: date
    _in: [date!]
    _is_null: Boolean
    _lt: date
    _lte: date
    _neq: date
    _nin: [date!]
}

"order by aggregate values of table \"tasks\""
input tasks_aggregate_order_by {
    count: order_by
    max: tasks_max_order_by
    min: tasks_min_order_by
}

"input type for inserting array relation for remote table \"tasks\""
input tasks_arr_rel_insert_input {
    data: [tasks_insert_input!]!
    on_conflict: tasks_on_conflict
}

"Boolean expression to filter rows from the table \"tasks\". All fields are combined with a logical 'AND'."
input tasks_bool_exp {
    _and: [tasks_bool_exp]
    _not: tasks_bool_exp
    _or: [tasks_bool_exp]
    completed: Boolean_comparison_exp
    createdAt: date_comparison_exp
    description: String_comparison_exp
    id: uuid_comparison_exp
    name: String_comparison_exp
    owner: users_bool_exp
    ownerId: uuid_comparison_exp
    tasks: users_bool_exp
}

"input type for inserting data into table \"tasks\""
input tasks_insert_input {
    completed: Boolean
    createdAt: date
    description: String
    id: uuid
    name: String
    owner: users_obj_rel_insert_input
    ownerId: uuid
    tasks: users_arr_rel_insert_input
}

"order by max() on columns of table \"tasks\""
input tasks_max_order_by {
    createdAt: order_by
    description: order_by
    name: order_by
}

"order by min() on columns of table \"tasks\""
input tasks_min_order_by {
    createdAt: order_by
    description: order_by
    name: order_by
}

"input type for inserting object relation for remote table \"tasks\""
input tasks_obj_rel_insert_input {
    data: tasks_insert_input!
    on_conflict: tasks_on_conflict
}

"on conflict condition type for table \"tasks\""
input tasks_on_conflict {
    constraint: tasks_constraint!
    update_columns: [tasks_update_column!]!
    where: tasks_bool_exp
}

"ordering options when selecting data from \"tasks\""
input tasks_order_by {
    completed: order_by
    createdAt: order_by
    description: order_by
    id: order_by
    name: order_by
    owner: users_order_by
    ownerId: order_by
    tasks_aggregate: users_aggregate_order_by
}

"input type for updating data in table \"tasks\""
input tasks_set_input {
    completed: Boolean
    createdAt: date
    description: String
    id: uuid
    name: String
    ownerId: uuid
}

"order by aggregate values of table \"users\""
input users_aggregate_order_by {
    count: order_by
    max: users_max_order_by
    min: users_min_order_by
}

"input type for inserting array relation for remote table \"users\""
input users_arr_rel_insert_input {
    data: [users_insert_input!]!
    on_conflict: users_on_conflict
}

"Boolean expression to filter rows from the table \"users\". All fields are combined with a logical 'AND'."
input users_bool_exp {
    _and: [users_bool_exp]
    _not: users_bool_exp
    _or: [users_bool_exp]
    auth0Id: String_comparison_exp
    createdAt: date_comparison_exp
    id: uuid_comparison_exp
    tasks: uuid_comparison_exp
    username: String_comparison_exp
}

"input type for inserting data into table \"users\""
input users_insert_input {
    auth0Id: String
    createdAt: date
    id: uuid
    tasks: uuid
    username: String
}

"order by max() on columns of table \"users\""
input users_max_order_by {
    auth0Id: order_by
    createdAt: order_by
    username: order_by
}

"order by min() on columns of table \"users\""
input users_min_order_by {
    auth0Id: order_by
    createdAt: order_by
    username: order_by
}

"input type for inserting object relation for remote table \"users\""
input users_obj_rel_insert_input {
    data: users_insert_input!
    on_conflict: users_on_conflict
}

"on conflict condition type for table \"users\""
input users_on_conflict {
    constraint: users_constraint!
    update_columns: [users_update_column!]!
    where: users_bool_exp
}

"ordering options when selecting data from \"users\""
input users_order_by {
    auth0Id: order_by
    createdAt: order_by
    id: order_by
    tasks: order_by
    username: order_by
}

"input type for updating data in table \"users\""
input users_set_input {
    auth0Id: String
    createdAt: date
    id: uuid
    tasks: uuid
    username: String
}

"expression to compare columns of type uuid. All fields are combined with logical 'AND'."
input uuid_comparison_exp {
    _eq: uuid
    _gt: uuid
    _gte: uuid
    _in: [uuid!]
    _is_null: Boolean
    _lt: uuid
    _lte: uuid
    _neq: uuid
    _nin: [uuid!]
}


scalar date

scalar uuid
